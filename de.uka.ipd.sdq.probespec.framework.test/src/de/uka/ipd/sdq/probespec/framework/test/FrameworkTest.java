package de.uka.ipd.sdq.probespec.framework.test;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.measure.Measure;
import javax.measure.quantity.Quantity;

import junit.framework.TestCase;
import de.uka.ipd.sdq.pipesandfilters.framework.PipeData;
import de.uka.ipd.sdq.pipesandfilters.framework.PipesAndFiltersManager;
import de.uka.ipd.sdq.pipesandfilters.framework.filters.ExampleFilter;
import de.uka.ipd.sdq.probespec.framework.ProbeSample;
import de.uka.ipd.sdq.probespec.framework.ProbeSetSample;
import de.uka.ipd.sdq.probespec.framework.ProbeSpecContext;
import de.uka.ipd.sdq.probespec.framework.ProbeType;
import de.uka.ipd.sdq.probespec.framework.RequestContext;
import de.uka.ipd.sdq.probespec.framework.SampleBlackboard;
import de.uka.ipd.sdq.probespec.framework.calculator.ICalculatorFactory;
import de.uka.ipd.sdq.probespec.framework.calculator.ICalculatorListener;
import de.uka.ipd.sdq.probespec.framework.calculator.StateCalculator;
import de.uka.ipd.sdq.probespec.framework.calculator.ResponseTimeCalculator;
import de.uka.ipd.sdq.probespec.framework.probes.IProbeStrategyRegistry;
import de.uka.ipd.sdq.probespec.framework.probes.example.ASimpleActiveResource;
import de.uka.ipd.sdq.probespec.framework.probes.example.ExampleProbeStrategyRegistry;
import de.uka.ipd.sdq.probespec.framework.probes.example.SimpleCPUResource;
import de.uka.ipd.sdq.probespec.framework.probes.example.SimpleSimulationContext;

public class FrameworkTest extends TestCase {

    private ProbeSpecContext psCtx;
    private SimpleSimulationContext simCtx;

    private ResponseTimeCalculator respTimeCalc;
    private StateCalculator cpuCalc;
    private PipesAndFiltersManager cpuPipeManager;
    private PipesAndFiltersManager respTimePipeManager;

    private static final String PROBE_SET_ID1 = "_probeSet1";
    private static final String PROBE_SET_ID2 = "_probeSet2";
    private static final String PROBE_SET_ID3 = "_probeSet3";

    private static final String CPU1_NAME = "CPU 1";

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        // initialize ProbeSpec
        psCtx = new ProbeSpecContext();

        // initialize the simulation and the measured model elements
        simCtx = new SimpleSimulationContext();
        SimpleCPUResource cpu = new SimpleCPUResource();
        simCtx.addActiveResource(CPU1_NAME, cpu);

        initialize();
    }

    // The code below would be generated by the M2T transformation
    private void initialize() {
        SampleBlackboard blackboard = new SampleBlackboard();
        IProbeStrategyRegistry probeStrategyRegistry = new ExampleProbeStrategyRegistry();
        ICalculatorFactory calculatorFactory = null;
        psCtx.initialise(blackboard, probeStrategyRegistry, calculatorFactory);

        buildCPUStateCalculator(blackboard);
        buildResponseTimeCalculator(blackboard);
    }

    private void buildResponseTimeCalculator(SampleBlackboard blackboard) {
        respTimePipeManager = new PipesAndFiltersManager(new ExampleFilter());
        respTimeCalc = new ResponseTimeCalculator(psCtx, psCtx.obtainProbeSetId(PROBE_SET_ID1),
                psCtx.obtainProbeSetId(PROBE_SET_ID2));
        respTimeCalc.addCalculatorListener(new ICalculatorListener() {
            @Override
            public void calculated(List<Measure<?, ? extends Quantity>> resultTuple) {
                respTimePipeManager.processData(new PipeData(resultTuple));
            }
        });
    }

    private void buildCPUStateCalculator(SampleBlackboard blackboard) {
        cpuPipeManager = new PipesAndFiltersManager(new ExampleFilter());
        cpuCalc = new StateCalculator(psCtx, psCtx.obtainProbeSetId(PROBE_SET_ID3));
        cpuCalc.addCalculatorListener(new ICalculatorListener() {
            @Override
            public void calculated(List<Measure<?, ? extends Quantity>> resultTuple) {
                cpuPipeManager.processData(new PipeData(resultTuple));
            }
        });
    }

    public void testFramework() {
        long simTime = 0;

        for (int i = 0; i < 20000; i++) {
            int duration = new Double(new Random(i).nextDouble() * 300.0).intValue();

            // ----------------------------------------------------------------
            // Simulate the simulation time
            simCtx.setSimulatedTime(simTime);

            List<ProbeSample<?, ? extends Quantity>> psv1 = new ArrayList<ProbeSample<?, ? extends Quantity>>(1);

            // Take a current time measurement
            psv1.add(psCtx.getProbeStrategyRegistry().getProbeStrategy(ProbeType.CURRENT_TIME, null)
                    .takeSample("probeID1", simCtx));

            // Generate a probe set sample from the probe sample
            ProbeSetSample pss1 = new ProbeSetSample(psv1, new RequestContext(String.valueOf(i)), "",
                    psCtx.obtainProbeSetId(PROBE_SET_ID1));

            // Publish the probe set sample on the blackboard
            psCtx.getSampleBlackboard().addSample(pss1);
            // ----------------------------------------------------------------

            // ----------------------------------------------------------------
            // Simulate the CPU utilization
            int jobs = i % 100;
            simCtx.getActiveResource(CPU1_NAME).setJobs(jobs);

            List<ProbeSample<?, ? extends Quantity>> psv2 = new ArrayList<ProbeSample<?, ? extends Quantity>>(2);

            // Take a CPU state measurement
            ASimpleActiveResource cpuToMeasure = simCtx.getActiveResource(CPU1_NAME);
            psv2.add(psCtx.getProbeStrategyRegistry()
                    .getProbeStrategy(ProbeType.RESOURCE_STATE, cpuToMeasure.getClass())
                    .takeSample("probeID2", cpuToMeasure));

            // Take a current time measurement
            psv2.add(psCtx.getProbeStrategyRegistry().getProbeStrategy(ProbeType.CURRENT_TIME, null)
                    .takeSample("probeID1", simCtx));

            // Generate a probe set sample from the probe samples
            ProbeSetSample pss2 = new ProbeSetSample(psv2, new RequestContext(String.valueOf(i)), "",
                    psCtx.obtainProbeSetId(PROBE_SET_ID3));

            // Publish probe sample on blackboard
            psCtx.getSampleBlackboard().addSample(pss2);

            // Check whether correct values arrived at the first pipe element
            ExampleFilter filter1 = (ExampleFilter) cpuPipeManager.getStartElement();
            assertEquals(jobs, ((Integer) filter1.getLastArrivedData().getTupleElement(1).getValue()).intValue());
            // ----------------------------------------------------------------

            simTime += duration;
            // ----------------------------------------------------------------
            // Simulate the simulation time
            simCtx.setSimulatedTime(simTime);

            List<ProbeSample<?, ? extends Quantity>> psv3 = new ArrayList<ProbeSample<?, ? extends Quantity>>(1);

            // Take a current time measurement
            psv3.add(psCtx.getProbeStrategyRegistry().getProbeStrategy(ProbeType.CURRENT_TIME, null)
                    .takeSample("probeID2", simCtx));

            // Generate a probe set sample from the probe sample
            ProbeSetSample pss3 = new ProbeSetSample(psv3, new RequestContext(String.valueOf(i)), "",
                    psCtx.obtainProbeSetId(PROBE_SET_ID2));

            // Publish the probe set sample on the blackboard
            psCtx.getSampleBlackboard().addSample(pss3);

            // Check whether correct values arrived at the first pipe element
            ExampleFilter filter2 = (ExampleFilter) respTimePipeManager.getStartElement();
            assertEquals(new Double(duration), ((Double) filter2.getLastArrivedData().getTupleElement(0).getValue()));
            // ----------------------------------------------------------------

        }
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();

        // tear down ProbeSpec
        psCtx.finish();
    }

}
