/**
 */
package edu.kit.ipd.sdq.probespec.provider;

import edu.kit.ipd.sdq.probespec.probespecPackage;

import edu.kit.ipd.sdq.probespec.util.probespecAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class probespecItemProviderAdapterFactory extends probespecAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
     * This helps manage the child creation extenders.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(ProbeSpecificationEditPlugin.INSTANCE, probespecPackage.eNS_URI);

	/**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
     * This constructs an instance.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public probespecItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

	/**
     * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.probespec.ProbeRepository} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected ProbeRepositoryItemProvider probeRepositoryItemProvider;

	/**
     * This creates an adapter for a {@link edu.kit.ipd.sdq.probespec.ProbeRepository}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createProbeRepositoryAdapter() {
        if (probeRepositoryItemProvider == null) {
            probeRepositoryItemProvider = new ProbeRepositoryItemProvider(this);
        }

        return probeRepositoryItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.probespec.DoubleProbe} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected DoubleProbeItemProvider doubleProbeItemProvider;

	/**
     * This creates an adapter for a {@link edu.kit.ipd.sdq.probespec.DoubleProbe}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createDoubleProbeAdapter() {
        if (doubleProbeItemProvider == null) {
            doubleProbeItemProvider = new DoubleProbeItemProvider(this);
        }

        return doubleProbeItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.probespec.DerivedObjectProbe} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DerivedObjectProbeItemProvider derivedObjectProbeItemProvider;

    /**
     * This creates an adapter for a {@link edu.kit.ipd.sdq.probespec.DerivedObjectProbe}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDerivedObjectProbeAdapter() {
        if (derivedObjectProbeItemProvider == null) {
            derivedObjectProbeItemProvider = new DerivedObjectProbeItemProvider(this);
        }

        return derivedObjectProbeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.probespec.DerivedDoubleProbe} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DerivedDoubleProbeItemProvider derivedDoubleProbeItemProvider;

    /**
     * This creates an adapter for a {@link edu.kit.ipd.sdq.probespec.DerivedDoubleProbe}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDerivedDoubleProbeAdapter() {
        if (derivedDoubleProbeItemProvider == null) {
            derivedDoubleProbeItemProvider = new DerivedDoubleProbeItemProvider(this);
        }

        return derivedDoubleProbeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.probespec.DerivedIntegerProbe} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DerivedIntegerProbeItemProvider derivedIntegerProbeItemProvider;

    /**
     * This creates an adapter for a {@link edu.kit.ipd.sdq.probespec.DerivedIntegerProbe}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDerivedIntegerProbeAdapter() {
        if (derivedIntegerProbeItemProvider == null) {
            derivedIntegerProbeItemProvider = new DerivedIntegerProbeItemProvider(this);
        }

        return derivedIntegerProbeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.probespec.DerivedLongProbe} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DerivedLongProbeItemProvider derivedLongProbeItemProvider;

    /**
     * This creates an adapter for a {@link edu.kit.ipd.sdq.probespec.DerivedLongProbe}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDerivedLongProbeAdapter() {
        if (derivedLongProbeItemProvider == null) {
            derivedLongProbeItemProvider = new DerivedLongProbeItemProvider(this);
        }

        return derivedLongProbeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.probespec.IntegerProbe} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected IntegerProbeItemProvider integerProbeItemProvider;

	/**
     * This creates an adapter for a {@link edu.kit.ipd.sdq.probespec.IntegerProbe}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createIntegerProbeAdapter() {
        if (integerProbeItemProvider == null) {
            integerProbeItemProvider = new IntegerProbeItemProvider(this);
        }

        return integerProbeItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.probespec.LongProbe} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected LongProbeItemProvider longProbeItemProvider;

	/**
     * This creates an adapter for a {@link edu.kit.ipd.sdq.probespec.LongProbe}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createLongProbeAdapter() {
        if (longProbeItemProvider == null) {
            longProbeItemProvider = new LongProbeItemProvider(this);
        }

        return longProbeItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.probespec.ObjectProbe} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected ObjectProbeItemProvider objectProbeItemProvider;

	/**
     * This creates an adapter for a {@link edu.kit.ipd.sdq.probespec.ObjectProbe}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createObjectProbeAdapter() {
        if (objectProbeItemProvider == null) {
            objectProbeItemProvider = new ObjectProbeItemProvider(this);
        }

        return objectProbeItemProvider;
    }

	/**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

	/**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

	/**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

	/**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

	/**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

	/**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public List<IChildCreationExtender> getChildCreationExtenders() {
        return childCreationExtenderManager.getChildCreationExtenders();
    }

	/**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
        return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
    }

	/**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public ResourceLocator getResourceLocator() {
        return childCreationExtenderManager;
    }

	/**
     * This adds a listener.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

	/**
     * This removes a listener.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

	/**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

	/**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void dispose() {
        if (objectProbeItemProvider != null) objectProbeItemProvider.dispose();
        if (probeRepositoryItemProvider != null) probeRepositoryItemProvider.dispose();
        if (integerProbeItemProvider != null) integerProbeItemProvider.dispose();
        if (longProbeItemProvider != null) longProbeItemProvider.dispose();
        if (doubleProbeItemProvider != null) doubleProbeItemProvider.dispose();
        if (derivedObjectProbeItemProvider != null) derivedObjectProbeItemProvider.dispose();
        if (derivedDoubleProbeItemProvider != null) derivedDoubleProbeItemProvider.dispose();
        if (derivedIntegerProbeItemProvider != null) derivedIntegerProbeItemProvider.dispose();
        if (derivedLongProbeItemProvider != null) derivedLongProbeItemProvider.dispose();
    }

}
